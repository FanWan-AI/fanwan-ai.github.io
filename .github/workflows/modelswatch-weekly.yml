name: Model Watch weekly

on:
  schedule:
    # Sunday 20:00 Beijing = Sunday 12:00 UTC
    - cron: '0 12 * * 0'
  workflow_dispatch:

jobs:
  run:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Weekly top updates
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
          DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
          DEEPSEEK_BASE_URL: ${{ secrets.DEEPSEEK_BASE_URL }}
          DEEPSEEK_MODEL: ${{ secrets.DEEPSEEK_MODEL }}
          LLM_CONN_TIMEOUT: ${{ secrets.LLM_CONN_TIMEOUT }}
          LLM_READ_TIMEOUT: ${{ secrets.LLM_READ_TIMEOUT }}
          HOTLIST_LIMIT_PER_TASK: 2
          HOTLIST_MIN_SEED_PER_TASK: 2
          HOTLIST_LIMIT_PER_CATEGORY: 2
          HOTLIST_MIN_SEED_PER_CATEGORY: 2
          HOTLIST_DEBUG: 1
          MODELSWATCH_DEBUG: 1
          SUMMARY_FALLBACK: 1
          USE_PYTHON_SUMMARIZER: 1
          TRI_ENABLE_REWRITE: 1
          TRI_ENABLE_EXPAND: 0
          TRI_BATCH_CONCURRENCY: 2
          TRI_CACHE_FILE: data/ai/modelswatch/tri_cache.json
          TRI_CACHE_PERSIST: 1
          # Ensure snapshot summaries are generated via the Python batch summarizer
          BILINGUAL_MODE: 1
          # Optional rate-limits for cold-start control (uncomment to enable)
          # SNAPSHOT_MAX_NEW: 40
          # New performance toggles
          SNAPSHOT_USE_BATCH: 1         # use single python batch call for snapshot summaries
          SPEED_MODE: 1                 # disable rewrite/expand for speed
          UNIFIED_JSON_NO_SEQ: 1        # if JSON-first returns partial, skip sequential fallback
          SKIP_TOP_ENRICH: 1            # skip per-item enrichment in weekly top lists (avoid duplicate summarization)
          BATCH_PROGRESS_INTERVAL: 10   # every 10 items print progress to stderr during batch
          RESET_MODELWATCH_ALL: ${{ vars.RESET_MODELWATCH_ALL }}
          RESET_MODELWATCH_CONFIRM: 1
          # (Optional) Post-cold-start cost controls (uncomment to enable)
          # SNAPSHOT_MAX_NEW: 40                # cap number of NEW items per run needing LLM summaries
          # SNAPSHOT_MIN_PER_SOURCE: 5          # guarantee at least 5 from each source (hf/github) before cap
          # SNAPSHOT_PRIORITY_FIELDS: downloads_total,stars,likes_total  # ordering for priority mode
          # SNAPSHOT_LIMIT_MODE: priority       # or 'random'
        run: |
          node -v
          python -V
          python -m pip install --upgrade pip >/dev/null 2>&1 || true
          python -m pip install requests >/dev/null 2>&1 || true
          if [ "${RESET_MODELWATCH_ALL}" = "1" ]; then
            echo "[workflow] RESET_MODELWATCH_ALL=1 -> purging historical ModelWatch artifacts"
            node tools/modelswatch/reset_modelswatch.mjs --yes || echo "reset script failed"
          else
            echo "[workflow] reset skipped (RESET_MODELWATCH_ALL != 1)"
          fi
          node tools/modelswatch/weekly.mjs
          # (generate_snapshot_summaries.mjs already invoked inside weekly.mjs after snapshots; skip duplicate call)
          # Coverage for tri-lingual summaries
          node tools/modelswatch/summaries_coverage.mjs || echo "summaries coverage failed"
          node tools/modelswatch/seed_hotlists.mjs
          # Coverage report (write JSON + console)
          node tools/modelswatch/analyze_hotlist_coverage.mjs --hotlist data/ai/modelswatch/models_hotlist.json --categories data/ai/ai_categories.json --out data/ai/modelswatch/coverage_summary.json || echo "coverage script failed"
          if [ ! -f data/ai/modelswatch/coverage_summary.json ]; then echo '{"note":"coverage summary not generated"}' > data/ai/modelswatch/coverage_summary.json; fi
          echo "--- coverage_summary.json ---" && cat data/ai/modelswatch/coverage_summary.json || true
          # Generate tri-lingual summaries (non-fatal on failure)
          node tools/modelswatch/generate_summaries.mjs || echo "summaries generation failed"
          echo "--- weekly_summaries.json (excerpt) ---" && head -c 800 data/ai/modelswatch/weekly_summaries.json || true
          # New: summary integrity + bucket coverage guards (warnings only)
          node tools/modelswatch/summary_integrity_check.mjs || echo "summary integrity check failed"
          node tools/modelswatch/coverage_guard.mjs || echo "coverage guard failed"
          node tools/modelswatch/classification_stats.mjs || echo "classification stats failed"
      - name: Commit and push
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git add data/ai/modelswatch/top_*.json \
            data/ai/modelswatch/corpus.*.json \
            data/ai/modelswatch/snapshots/** \
            data/ai/modelswatch/models_hotlist.json \
            data/ai/modelswatch/projects_hotlist.json \
            data/ai/modelswatch/coverage_summary.json \
            data/ai/modelswatch/weekly_summaries.json \
            data/ai/modelswatch/summary_cache.json \
            data/ai/modelswatch/summaries_coverage.json \
            data/ai/modelswatch/coverage_gaps.json \
            data/ai/modelswatch/classification_stats.json \
            data/ai/modelswatch/tri_cache.json \
            data/ai/modelswatch/summaries_diagnostics.json \
            data/ai/modelswatch/weekly_summaries_diagnostics.json || true
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore(modelswatch): weekly pipeline (tops+corpus+snapshots+hotlists)"
            git push
          fi
